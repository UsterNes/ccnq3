# nat.cfg -- handler for messages originating or terminating behind NAT
# Copyright (C) 2009  Stephane Alnet
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# -----------------------------------------------------------------
# NAT Traversal Section
# -----------------------------------------------------------------

route[nlr-nat]
{
  xlog("L_DBG","-- nlr-nat -- NAT tests for NLR $rm");

  if(is_method("SUBSCRIBE") || is_method("NOTIFY") || is_method("INVITE") || is_method("OPTIONS")) {
    route(initial-nat);
  }
  if(is_method("CANCEL")||is_method("PRACK")) {
    ${lr_detect_nat}
  }
  if(is_method("ACK")) {
    ${ack_nat}
  }
  # Other methods (BYE) should be LR
}

route[initial-nat] # NAT traversal for initial INVITE/SUBSCRIBE/NOTIFY/OPTIONS
{
  xlog("L_DBG","-- initial-nat -- NAT tests for initial $rm");

  # NAT tests:
  # NAT test 1 = RFC1918 IP in Contact ?
  # NAT test 2 = From address != 1st Via
  if (client_nat_test("3") && !search("^Record-Route:")) {
    xlog("L_DBG","-- initial-nat-- $rm sender is NATed");
    sl_send_reply("100", "NAT detected");

    # Record what we found.
    setflag(${flag_request_mp_caller});

    force_rport();
    fix_contact();
    if(proto==UDP) { nat_keepalive(); }
  }
}


route[lr-nat] # NAT traversal for loose-routed messages
{
  xlog("L_DBG","-- lr-nat -- NAT tests for LR $rm");

  if(is_method("INVITE")) {
    # This might be overkill
    route(initial-nat);
  }
  if(is_method("BYE")||is_method("CANCEL")||is_method("PRACK")||is_method("SUBSCRIBE")) {
    ${lr_detect_nat}
  }
  if(is_method("ACK")) {
    ${ack_nat}
  }
}

macro lr_detect_nat

  xlog("L_DBG","-- lr_detect_nat --");

  # NAT test 1 = RFC1918 IP in Contact ?
  # NAT test 2 = From address != 1st Via ?
  if (client_nat_test("3")) {
    xlog("L_DBG","-- lr_detect_nat -- $rm sender is NATed");
    sl_send_reply("100", "NAT detected");
    force_rport();
    fix_contact();
    if(proto==UDP) { nat_keepalive(); }
  }

end macro lr_detect_nat


macro ack_nat

  xlog("L_DBG","-- ack_nat --");

  # Handle NAT on ACK
  xlog("L_DBG","-- ack-nat");
  if(isflagset(${flag_request_mp_caller})) {
    force_rport();
    fix_contact();
    if(proto==UDP) { nat_keepalive(); }
  }

end macro ack_nat


macro register_nat

  xlog("L_DBG","-- register_nat --");

  # NAT test 1 = RFC1918 IP in Contact ?
  # NAT test 2 = From address != 1st Via ?
  # NAT test 4 = RFC1918 in top Via ?
  if (client_nat_test("7") && !search("^Contact:[ ]*\*")) {
      xlog("L_DBG","-- register_nat: Registering device is NATed");
      setbflag(${bflag_request_mp_callee}); # endpoint is NATed (stored in the database by registrar)
      force_rport();
      if(proto==UDP) {
        nat_keepalive();
      }
      if(proto==TCP) {
        setflag(${flag_tcp_persistent}); # tcp_persistent_flag
      }
      $avp(received_avp) = $source_uri;
  };

end macro register_nat

macro onreply_nat

  xlog("L_DBG","-- onreply_nat --");

      # NAT test 1 = RFC1918 IP in Contact ?
      if( client_nat_test("1") ) {
          fix_contact();
      }

end macro onreply_nat
