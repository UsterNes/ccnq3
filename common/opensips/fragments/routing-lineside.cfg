# routing-lineside.cfg -- INVITE handler for line-side (customer) termination
# Copyright (C) 2009  Stephane Alnet
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

define need_avp_db

route[try-line-side]
{
  xlog("L_DBG","-- route(try-line-side): Attempting to locate $ru");

  # Attempt to find a local number first (line-side).
  # Note: to support allow_onnet we actually cannot be checking the domains.
  #       This breaks virtual domains, though. XXX
  if( !avp_db_load("$rU","$(avp(number))") ) {
    xlog("L_DBG","-- route(try-line-side): Not line-side");
    return;
  } else {
    $json(dst_number) := $avp(number);
  }

  $avp(dst_endpoint) = $json(dst_number/dst_endpoint);
  $avp(dialog_timer) = $json(dst_number/dialog_timer);

  if( !avp_db_load("$(avp(dst_endpoint))","$(avp(endpoint))") ) {
    t_reply("500", "Invalid destination endpoint");
    exit;
  } else {
    $json(dst_endpoint) := $avp(endpoint);
    $avp(dst_endpoint) = $json(dst_endpoint/endpoint);
  }

  if( $json(dst_endpoint/dst_disabled) ) {
    t_reply("403", "Administratively Forbidden");
    exit;
  }

  $(avp(dst_type)) = "ONNET";

  # These used to rely on $ru rather than $rU, might need to revert.
  $avp(dst_domain) = $json(dst_number/dst_domain);

  $avp(cfa)  = $json(dst_number/cfa);
  $avp(cfb)  = $json(dst_number/cfb);
  $avp(cfda) = $json(dst_number/cfda);
  $avp(cfnr) = $json(dst_number/cfnr);
  $avp(inv_timer) = $json(dst_number/inv_timer);

  # Now we switch to the target domain.
  xlog("L_DBG","-- route(try-line-side): Switching to target domain $(avp(dst_domain))");
  $rd = $(avp(dst_domain));
  $rp = ""; # Clear port


  xlog("L_DBG","-- route(try-line-side): dst_endpoint: $(avp(dst_endpoint)) account: $(avp(account))");

  if not ignore_dest_domain
  # Note: flag 16 prevents sending twice (in the unlikely event that both
  #       caller and callee need to be recorded).
  if( (! isflagset(${flag_dest_domain_set}))
      && $json(dst_endpoint/dest_domain)
    ) {
    $avp(dest_domain) = $json(dst_endpoint/dest_domain);
    setflag(${flag_dest_domain_set});
  }
  end if not ignore_dest_domain

  if( $json(dst_endpoint/user_force_mp) ) {
    xlog("L_DBG","-- try-line-side -- Force MediaProxy for $(avp(dst_endpoint))");
    setflag(${flag_request_mp_callee}); # force MP for callee
  }

  xlog("L_DBG","-- route(try-line-side): dst_endpoint: $(avp(dst_endpoint)) src_type: $(avp(src_type))");
  route(line-side-invite); # Route towards line-side
  exit;
}

# Route towards line-side
route[line-side-invite]
{
  xlog("L_DBG","-- route(line-side-invite) Routing to line-side");

  # Force to use the external socket info, if any.
  if external_ip
    force_send_socket(${external_ip});
  end if external_ip

  # If CFA is enabled, go that way
  if( $(avp(cfa)) ) {
    xlog("L_DBG","-- CFA = $(avp(cfa))");

    # CFA AVP is a full URI
    $ru = $(avp(cfa));
    ${media_proxy_in_ruri}
    route(update-media-proxy);   # Start MP if needed
    route(initial-forwarder);
    exit;
  }

  # If the target has a user_via, route through it
  if( $json(dst_endpoint/user_via) ) {
    if( $json(dst_endpoint/user_srv) ) {
      $ru = 'sip:' + $rU + '-' + $json(dst_endpoint/user_srv) + '@' + $json(dst_endpoint/user_via);
    } else {
      $ru = 'sip:' + $rU + '-' + $json(dst_endpoint/user_ip) + '@' + $json(dst_endpoint/user_via);
    }

    ${media_proxy_in_ruri}
    route(update-media-proxy);   # Start MP if needed
    route(initial-forwarder);
    exit;
  }

  # Save the original username in case we need it.
  $var(a) = $rU;

  # Use the regular destination username
  # NumUser AVP only gives the username.
  $rU = $(avp(dst_endpoint));

  # Locate the username if available (REGISTERed).
  ${lookup};

  # This is going to one of our users, ring them.
  route(update-media-proxy);   # Start MP if needed
  route(initial-forwarder);
  exit;
}

route[static-line-side]
{
  xlog("L_DBG","-- route(static-line-side)");
  if( $(avp(cfnr)) ) {
    xlog("L_DBG","-- route(static-line-side) Using CFNR");
    $ru = $(avp(cfnr));
    # CFNR may contain ";mp=yes"
    ${media_proxy_in_ruri}
    route(update-media-proxy);   # Start MP if needed
    return
  }

  if( $json(dst_endpoint/user_srv) ) {
    xlog("L_DBG","-- route(static-line-side) Using user_srv");
    $ru = "sip:" + $var(a) + "@" + $json(dst_endpoint/user_srv);
    $rp = ""; # Clear port
    # "user_srv" may contains extra parameters, including ";mp=yes"
    ${media_proxy_in_ruri}
    route(update-media-proxy);   # Start MP if needed
  } else
  if( $json(dst_endpoint/user_ip) ) {
    xlog("L_DBG","-- route(static-line-side) Using user_ip");
    $ru = "sip:" + $var(a) + "@" + $json(dst_endpoint/user_ip);
    if( $json(dst_endpoint/user_port) ) {
        $ru = "sip:" + $var(a) + "@" + $json(dst_endpoint/user_ip) + ":" + $json(dst_endpoint/user_port);
    }
  } else {
      xlog("L_DBG","-- route(static-line-side) Not found");
      t_reply("404", "Not Found");
      exit;
  }

  if( $json(dst_endpoint/strip_digit) )
  {
    strip(1);
  }

}
