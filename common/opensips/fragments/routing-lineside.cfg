# routing-lineside.cfg -- INVITE handler for line-side (customer) termination
# Copyright (C) 2009  Stephane Alnet
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

define need_avp_db

route[try-line-side]
{
  xlog("L_DBG","-- route(try-line-side): Attempting to locate $ru");

  # Attempt to find a local number first (line-side).
  # Do not use the RURI domain name, instead use the number_domain.
  $avp(number) := null;
  $var(local_number) = $rU+"@${number_domain}";
  if(!cache_fetch("local","number $var(local_number)",$avp(number))) {
    if(!avp_db_load("$var(local_number)","$avp(number)")) {
      $avp(number) := '{}';
    }
    cache_store("local","number $var(local_number)","$avp(number)",${cache_timeout});
  }

  $json(dst_number) := $avp(number);
  $avp(number) := null;

  if(!$json(dst_number/number)) {
    xlog("L_DBG","-- route(try-line-side): Not line-side");
    return;
  }

  # Call rejection: reject anonymous caller
  if( $json(dst_number/reject_anonymous) ) {
    # There's more than one way to be anonymous.
    # Exclude Privacy=id
    if( is_privacy("id") ) {
      t_reply("603","Decline (anonymous)");
    }
  }

  # Gather data for whitelist/blacklist
  if( $json(dst_number/use_blacklist) || $json(dst_number/use_whitelist) ) {
    # Check P-Asserted-Identity
    $avp(list_key) = "$var(local_number)@$(hdr(P-Asserted-Identity){uri.user})";
    $avp(list) := null;
    if(!cache_fetch("local","list $avp(list_key)",$avp(list))) {
      if(!avp_db_load("$avp(list_key)","$avp(list)")) {
        $avp(list) := '{}';
      }
      cache_store("local","list $avp(list_key)","$avp(list)",${cache_timeout});
    }

    $json(list) := $avp(list);
    $avp(list) := null;
  }

  # Blacklisting of calling number
  if( $json(dst_number/use_blacklist) ) {
    if( $json(list/blacklist) ) {
      t_reply("603","Decline (blacklisted)");
    }
  }

  # Whitelisting of calling number
  if( $json(dst_number/use_whitelist) ) {
    if( $json(list/whitelist) ) {
      t_reply("100","Whitelisted");
    } else {
      t_reply("603","Decline (not whitelisted)");
    }
   }

  $avp(dialog_timer) = $json(dst_number/dialog_timer);

  $var(dst_endpoint) = $json(dst_number/endpoint);

  $avp(endpoint) := null;
  if(!cache_fetch("local","endpoint $var(dst_endpoint)",$avp(endpoint))) {
    if(!avp_db_load("$var(dst_endpoint)","$avp(endpoint)")) {
      $avp(endpoint) := '{}';
    }
    cache_store("local","endpoint $var(dst_endpoint)","$avp(endpoint)",${cache_timeout});
  }

  $json(dst_endpoint) := $avp(endpoint);
  $avp(endpoint) := null;

  if( !$json(dst_endpoint/endpoint) ) {
    t_reply("500", "Invalid destination endpoint");
    exit;
  }

  if( $json(dst_endpoint/dst_disabled) ) {
    t_reply("403", "Administratively Forbidden");
    exit;
  }

  $(avp(dst_type)) = "ONNET";

  $avp(cfa)  = $json(dst_number/cfa);
  $avp(cfb)  = $json(dst_number/cfb);
  $avp(cfda) = $json(dst_number/cfda);
  $avp(cfnr) = $json(dst_number/cfnr);
  $avp(inv_timer) = $json(dst_number/inv_timer);

  if($avp(cfb) || $avp(cfda)) {
    sl_send_reply("180","Simulated Ringing in case of forwarding");
    setflag(${flag_has_forwarding});
  }

  # Now we switch to the target domain.
  xlog("L_DBG","-- route(try-line-side): Switching to target domain $(avp(dst_domain))");
  $rd = $(avp(dst_domain));
  $rp = ""; # Clear port

  # No $avp(account) is available at this point.
  avp_delete("$(avp(account))");

  xlog("L_DBG","-- route(try-line-side): dst_endpoint: $json(dst_endpoint/endpoint)");

  if not ignore_dest_domain
  # Note: flag 16 prevents sending twice (in the unlikely event that both
  #       caller and callee need to be recorded).
  if( (! isflagset(${flag_dest_domain_set}))
      && $json(dst_endpoint/dest_domain)
    ) {
    $avp(dest_domain) = $json(dst_endpoint/dest_domain);
    setflag(${flag_dest_domain_set});
  }
  end if not ignore_dest_domain

  if( $json(dst_endpoint/user_force_mp) ) {
    xlog("L_DBG","-- try-line-side -- Force MediaProxy for $json(dst_endpoint)");
    setflag(${flag_request_mp_callee}); # force MP for callee
  }

  xlog("L_DBG","-- route(try-line-side): dst_endpoint: $(json(dst_endpoint)) src_type: $(avp(src_type))");
  route(line-side-invite); # Route towards line-side
  exit;
}

# Route towards line-side
route[line-side-invite]
{
  xlog("L_DBG","-- route(line-side-invite) Routing to line-side");

  # Force to use the external socket info, if any.
  if external_ip
    force_send_socket(${external_ip});
  end if external_ip

  # If CFA is enabled, go that way
  if( $(avp(cfa)) ) {
    append_to_reply("Contact: $avp(cfa)\r\n");
    t_reply("302","Call Forward All");
    exit;
  }

  # If the target has a user_via, route through it
  if( $json(dst_endpoint/user_via) ) {
    if( $json(dst_endpoint/user_srv) ) {
      $ru = 'sip:' + $rU + '-' + $json(dst_endpoint/user_srv) + '@' + $json(dst_endpoint/user_via);
    } else {
      $ru = 'sip:' + $rU + '-' + $json(dst_endpoint/user_ip) + '@' + $json(dst_endpoint/user_via);
    }

    ${media_proxy_in_ruri}
    route(update-media-proxy);   # Start MP if needed
    route(initial-forwarder);
    exit;
  }

  # Save the original username in case we need it.
  $var(a) = $rU;

  # Use the regular destination RURI for lookup.
  $var(aor) = 'sip:' + $json(dst_endpoint/endpoint);

  # Locate the username if available (REGISTERed).
  ${lookup};

  # This is going to one of our users, ring them.
  route(update-media-proxy);   # Start MP if needed
  route(initial-forwarder);
  exit;
}

route[static-line-side]
{
  xlog("L_DBG","-- route(static-line-side)");
  if( $(avp(cfnr)) ) {
    xlog("L_DBG","-- route(static-line-side) Using CFNR");
    $ru = $(avp(cfnr));
    # CFNR may contain ";mp=yes"
    ${media_proxy_in_ruri}
    route(update-media-proxy);   # Start MP if needed
    return;
  }

  if( $json(dst_endpoint/user_srv) ) {
    xlog("L_DBG","-- route(static-line-side) Using user_srv");
    $ru = "sip:" + $var(a) + "@" + $json(dst_endpoint/user_srv);
    $rp = ""; # Clear port
    # "user_srv" may contains extra parameters, including ";mp=yes"
    ${media_proxy_in_ruri}
    route(update-media-proxy);   # Start MP if needed
  } else
  if( $json(dst_endpoint/user_ip) ) {
    xlog("L_DBG","-- route(static-line-side) Using user_ip");
    $ru = "sip:" + $var(a) + "@" + $json(dst_endpoint/user_ip);
    if( $json(dst_endpoint/user_port) ) {
        $ru = "sip:" + $var(a) + "@" + $json(dst_endpoint/user_ip) + ":" + $json(dst_endpoint/user_port);
    }
  } else {
      xlog("L_DBG","-- route(static-line-side) Not found");
      t_reply("404", "Not Found");
      exit;
  }

  if( $json(dst_endpoint/strip_digit) )
  {
    strip(1);
  }

}
