# invite-router.cfg -- INVITE handler for a generic router
# Copyright (C) 2009  Stephane Alnet
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# -----------------------------------------------------------------
# INVITE Message Handler
# -----------------------------------------------------------------

define need_avp_db

route[invite-handler]
{
    xlog("L_DBG","-- invite-router -- $ru");

    t_on_failure("1");
    t_on_reply("1");

    $avp(number) := null;
    $var(local_number) = $fU+"@${number_domain}";
    if(!cache_fetch("local","number $var(local_number)",$avp(number))) {
      if(!avp_db_load("$var(local_number)","$avp(number)")) {
        $avp(number) := '{}';
      }
      cache_store("local","number $var(local_number)","$avp(number)",${cache_timeout});
    }

    $json(src_number) := $avp(number);
    $avp(number) := null;

    route(lookup-src);

    if($avp(src_type) == "ONNET") {
      if($json(src_endpoint/allow_onnet)) {
        route(try-line-side);
      }
      route(try-trunk-side);
    } else {
      # From Off-net
      route(try-line-side);
    }

    # Invalid destination
    t_reply("404", "User Not Found");
    exit;
}

route[lookup-src]
{

  # -- Inbound SBC
  if($json(src_endpoint/inbound_sbc) == ${sbc_own_upstream}) {
    $(avp(src_type)) = "PSTN";
    # Also trust the charging information, if any (normally none is present).
    avp_delete("$(avp(account))");
    $avp(account)     = $(hdr(P-Charge-Info){uri.user}{s.unescape.user});
    return;
  }

  # -- Outbound call, coming from line-side
  if($json(src_endpoint/endpoint)) {
    $(avp(src_type)) = "ONNET";

    if( $json(src_endpoint/src_disabled) ) {
      t_reply("403", "Administratively Forbidden");
      exit;
    }

    if not ignore_dest_domain
    if( (! isflagset(${flag_dest_domain_set}))
           && $json(src_endpoint/dest_domain) ) {
      setflag(${flag_dest_domain_set});
    }
    end if not ignore_dest_domain

    if( $json(src_endpoint/user_force_mp) ) {
      xlog("L_DBG","-- invite-router -- Force MediaProxy for $(json(src_endpoint/endpoint))");
      setflag(${flag_request_mp_caller}); # force MP for caller
    }

    if( $json(src_endpoint/check_from) ) {
      xlog("L_DBG","-- invite-router -- Checking From username");
      if( $json(src_number/endpoint) != $json(src_endpoint/endpoint) ) {
        t_reply("403", "From Username is not listed");
        exit;
      }
    }

    # Account selection
    avp_delete("$(avp(account))");

    switch($json(src_endpoint/sbc)) {
      case ${sbc_own_outbound}:
        # Trust the account information provided by this internal SBC.
        $avp(account)     = $(hdr(P-Charge-Info){uri.user}{s.unescape.user});
        break;

      default:
        # Use the endpoint's account information.
        $avp(account)     = $json(src_endpoint/account);
    }
    #/ Account selection

    # Max call duration
    if( $json(src_endpoint/dialog_timer) ) {
      $avp(dialog_timer) = $json(src_endpoint/dialog_timer);
    }

    xlog("L_DBG","-- invite-router -- Customer device $(json(src_endpoint)) with account $(avp(account)).");
  }
}
