# invite-router.cfg -- INVITE handler for a generic router
# Copyright (C) 2009  Stephane Alnet
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# -----------------------------------------------------------------
# INVITE Message Handler
# -----------------------------------------------------------------

define need_avp_db

route[invite-handler]
{
    xlog("L_DBG","-- invite-router -- $ru");

    t_on_failure("1");
    t_on_reply("1");

    route(lookup-src);

    if not ignore_location
    # Lookup emergency location based on calling number, if available.
    avp_db_load("$fU","$(avp(number_location))");
    end if not ignore_location

    if($(avp(src_type)) == "ONNET") {
      if(avp_db_load("$(avp(src_subs))","$(avp(allow_onnet))")) {
        route(try-line-side);
      }
      route(try-trunk-side);
    } else {
      # From Off-net
      route(try-line-side);
    }

    # Invalid destination
    sl_send_reply("404", "User Not Found");
    exit;
}

route[lookup-src]
{
  # -- Provider-side (top)
  if( if has_trusted allow_trusted() || end if has_trusted 0 ) {
    # A trusted device is a provider-side trunk, including a local gateway (S2S).
    $(avp(src_type)) = "PSTN";
    return;
  }

  # -- Line-side
  if($(avp(src_subs))) {
    $(avp(src_type)) = "ONNET";

    if not ignore_dest_domain
    if( (! isflagset(${flag_dest_domain_set}))
           && avp_db_load("$(avp(src_subs))","$(avp(dest_domain))") ) {
      setflag(${flag_dest_domain_set});
    }
    end if not ignore_dest_domain

    if( avp_db_load("$(avp(src_subs))","$(avp(user_force_mp))") ) {
      xlog("L_DBG","-- invite-router -- Force MediaProxy for $(avp(src_subs))");
      setflag(${flag_request_mp_caller}); # force MP for caller
    }

    if( avp_db_load("$(avp(src_subs))","$(avp(check_from))") ) {
      $var(caller_key) = $avp(src_subs) + ',' + $fU;
      xlog("L_DBG","-- invite-router -- Checking From username for $var(caller_key)");
      if( !avp_db_load("$var(caller_key)","$(avp(valid_from))") ) {
        sl_send_reply("404", "From Username is not listed");
        exit;
      }
    }

    # Account headers
    avp_delete("$(avp(account))");
    avp_delete("$(avp(account_sub))");

    # If the source is a trusted SBC then they must provide us with RURI parameters
    # that contain the account and account_sub, similar to what we send out in
    # the "initial-forwarder" route.
    # Otherwise we locate the account and account_sub based on the src_subs.
    if($(avp(forwarding_sbc)) == "2") {
      $avp(account)     = $(ru{uri.param,account});
      $avp(account_sub) = $(ru{uri.param,account_sub});
    }
    else
    if(avp_db_load("$(avp(src_subs))","$(avp(account))")) {
      avp_db_load("$(avp(src_subs))","$(avp(account_sub))");
    }
    #/ Account headers

    # Subscriber/endpoint-specific outbound routing
    avp_db_load("$(avp(src_subs))","$(avp(user_outbound_route))");
    avp_db_load("$(avp(src_subs))","$(avp(ignore_caller_outbound_route))");
    avp_db_load("$(avp(src_subs))","$(avp(ignore_default_outbound_route))");
    if( avp_db_load("$(avp(src_subs))","$(avp(src_disabled))") ) {
      sl_send_reply("403", "Administratively Forbidden");
      exit;
    }

    # Subscriber/endpoint location information
    avp_db_load("$(avp(src_subs))","$(avp(user_location))");

    # Max call duration
    avp_db_load("$(avp(src_subs))","$(avp(dialog_timer))");

    xlog("L_DBG","-- invite-router -- Customer device $(avp(src_subs)) with account $(avp(account)).");
  }
}
