# invite-router.cfg -- INVITE handler for a generic router
# Copyright (C) 2009  Stephane Alnet
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# -----------------------------------------------------------------
# INVITE Message Handler
# -----------------------------------------------------------------

define need_avp_db

route[invite-handler]
{
    xlog("L_DBG","-- invite-router -- $ru");

    t_on_failure("1");
    t_on_reply("1");

    $avp(number) := null;
    $var(local_number) = "$fU@${number_domain}";
    if(!cache_fetch("local","number $var(local_number)",$avp(number))) {
      if(!avp_db_load("$var(local_number)","$avp(number)")) {
        $avp(number) := '{}';
      }
      cache_store("local","number $var(local_number)","$avp(number)",${cache_timeout});
    }

    $json(src_number) := $avp(number);
    $avp(number) := null;

    route(lookup-src);

    if($avp(src_type) == "ONNET") {
      if($json(src_endpoint/allow_onnet)) {
        route(try-line-side);
      }
      route(try-trunk-side);
    } else {
      # From Off-net
      route(try-line-side);
    }

    # Invalid destination
    t_reply("404", "User Not Found");
    exit;
}

route[lookup-src]
{
  # -- Provider-side (top)
  if($json(src_endpoint/trusted)) {
    # A trusted device is a provider-side trunk, including a local gateway (S2S).
    $(avp(src_type)) = "PSTN";
    # Also trust the charging information, if any.
    avp_delete("$(avp(account))");
    $avp(account)     = $(hdr(P-Charge-Info){uri.user});
    return;
  }

  # -- Line-side
  if($json(src_endpoint/endpoint)) {
    $(avp(src_type)) = "ONNET";

    if not ignore_dest_domain
    if( (! isflagset(${flag_dest_domain_set}))
           && $json(src_endpoint/dest_domain) ) {
      setflag(${flag_dest_domain_set});
    }
    end if not ignore_dest_domain

    if( $json(src_endpoint/user_force_mp) ) {
      xlog("L_DBG","-- invite-router -- Force MediaProxy for $(json(src_endpoint/endpoint))");
      setflag(${flag_request_mp_caller}); # force MP for caller
    }

    if( $json(src_endpoint/check_from) ) {
      xlog("L_DBG","-- invite-router -- Checking From username for $var(caller_key)");
      if( $json(src_number/endpoint) != $json(src_endpoint/endpoint) ) {
        t_reply("404", "From Username is not listed");
        exit;
      }
    }

    # Account headers
    avp_delete("$(avp(account))");

    # If the source is a trusted SBC then they must provide us with P-Charge-Info.
    # The username part of the P-Charge-Info URI is used as the account.
    # Otherwise we locate the account based on the src_endpoint.
    if($(avp(forwarding_sbc)) == "2") {
      $avp(account)     = $(hdr(P-Charge-Info){uri.user});

        $avp(account_forwarder_key) = "$avp(account)@$json(src_endpoint/endpoint)";
        $avp(account_forwarder) := null;
        if(!cache_fetch("local","account_forwarder $avp(account_forwarder_key)",$avp(account_forwarder))) {
          if(!avp_db_load("$avp(account_forwarder_key)","$avp(account_forwarder)")) {
            $avp(account_forwarder) := '{}';
          }
          cache_store("local","account_forwarder $avp(account_forwarder_key)","$avp(account_forwarder)",${cache_timeout});
        }

        $json(account_forwarder) := $avp(account_forwarder);
        $avp(account_forwarder) := null;

        if( ! $json(account_forwarder/account) ) {
          t_reply("403","Invalid P-Charge-Info header");
          exit;
        }

    } else {
      $avp(account)     = $json(src_endpoint/account);
    }
    #/ Account headers

    if( $json(src_endpoint/src_disabled) ) {
      t_reply("403", "Administratively Forbidden");
      exit;
    }

    # Max call duration
    $avp(dialog_timer) = $json(src_endpoint/dialog_timer);

    xlog("L_DBG","-- invite-router -- Customer device $(json(src_endpoint)) with account $(avp(account)).");
  }
}
