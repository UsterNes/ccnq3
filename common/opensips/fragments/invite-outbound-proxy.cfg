# invite-outbound-proxy.cfg -- INVITE handler for an outbound-proxy
# Copyright (C) 2009  Stephane Alnet
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

define use_drouting
define skip_lineside
define use_shorter_fr_timer

define need_avp_db

route[invite-handler]
{
    xlog("L_DBG","-- invite-outbound-proxy -- $ru");

    t_on_failure("1");
    t_on_reply("1");

    # Need to be able to route based on:
    # - calling number + called number
    # - called number
    # - calling number
    # For the outbound-proxy, needs to be able to do LCR.
    # See http://www.opensips.org/html/docs/modules/1.5.x/drouting.html

    # Attempt to find a local number first.
    # Alternatively, use Carrier ENUM.
    $avp(number) := null;
    if(!cache_fetch("local","number $rU",$avp(number))) {
      if(!avp_db_load("$rU","$avp(number)")) {
        $avp(number) := '{}';
      }
      cache_store("local","number $rU","$avp(number)",${cache_timeout});
    }

    $json(dst_number) := $avp(number);
    $avp(number) := null;

    if($json(dst_number/inbound_uri)) {
      xlog("L_DBG","-- route(invite-handler): Using local inbound_uri");
      $ru = $json(dst_number/inbound_uri);
      setflag(${flag_trunk_routing});
      t_on_branch("1");
      route(initial-forwarder);   # Forward
      return;
    }

    # Only outbound SBCs may route calls.
    switch($json(src_endpoint/sbc)) {
      case ${sbc_own_outbound}:
      case ${sbc_csr_outbound}:
        break;
      default:
        t_reply("403","Routing Forbidden");
        exit;
    }

    route(lookup-src);

    # LCR
    route(invite-trunk-drouting);

    # Invalid destination
    t_reply("502", "No route");
    exit;
}

route[lookup-src]
{
  # -- Outbound call
  if($json(src_endpoint/endpoint)) {
    $(avp(src_type)) = "ONNET";

    if( $json(src_endpoint/src_disabled) ) {
      t_reply("403", "Administratively Forbidden");
      exit;
    }

    if not ignore_dest_domain
    if( (! isflagset(${flag_dest_domain_set}))
           && $json(src_endpoint/dest_domain) ) {
      setflag(${flag_dest_domain_set});
    }
    end if not ignore_dest_domain

    if( $json(src_endpoint/user_force_mp) ) {
      xlog("L_DBG","-- invite-router -- Force MediaProxy for $(json(src_endpoint/endpoint))");
      setflag(${flag_request_mp_caller}); # force MP for caller
    }

    # Account selection
    avp_delete("$(avp(account))");

    switch($json(src_endpoint/sbc)) {
      case ${sbc_own_outbound}:
        # Trust the account information provided by this internal SBC.
        $avp(account)     = $(hdr(P-Charge-Info){uri.user}{s.unescape.user});
        break;

      case ${sbc_csr_outbound}:
        # Check the customer-provided account against a list of authorized accounts.
        $avp(account)     = $(hdr(P-Charge-Info){uri.user}{s.unescape.user});

        $avp(account_forwarder_key) = "$avp(account)@$json(src_endpoint/endpoint)";
        $avp(account_forwarder) := null;
        if(!cache_fetch("local","account_forwarder $avp(account_forwarder_key)",$avp(account_forwarder))) {
          if(!avp_db_load("$avp(account_forwarder_key)","$avp(account_forwarder)")) {
            $avp(account_forwarder) := '{}';
          }
          cache_store("local","account_forwarder $avp(account_forwarder_key)","$avp(account_forwarder)",${cache_timeout});
        }

        $json(account_forwarder) := $avp(account_forwarder);
        $avp(account_forwarder) := null;

        if( ! $json(account_forwarder/account) ) {
          t_reply("403","Invalid P-Charge-Info header");
          exit;
        }
        break;

      default:
        # Use the endpoint's account information.
        $avp(account)     = $json(src_endpoint/account);
    }
    #/ Account selection

    # Max call duration
    if( $json(src_endpoint/dialog_timer) ) {
      $avp(dialog_timer) = $json(src_endpoint/dialog_timer);
    }

    xlog("L_DBG","-- invite-router -- Customer device $(json(src_endpoint)) with account $(avp(account)).");
  }
}
