# invite-outbound-proxy.cfg -- INVITE handler for an outbound-proxy
# Copyright (C) 2009  Stephane Alnet
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

define use_drouting
define skip_lineside
define use_shorter_fr_timer

define need_avp_db

route[invite-handler]
{
    xlog("L_DBG","-- invite-outbound-proxy -- $ru");

    t_on_failure("1");
    t_on_reply("1");

    # Use emergency location data if provided in the call
    $var(location) = $(hdr(X-CCNQ3-Location));

    xlog("L_DBG","-- invite-outbound-proxy -- Location = $var(location)");

    if( $var(location) && avp_db_load("$(var(location))","$(avp(location))") ) {
      $json(location) := $avp(location);
      remove_hf("X-CCNQ3-Routing");
      append_hf("X-CCNQ3-Routing: $json(location/routing_data)\r\n");
    }

    # Need to be able to route based on:
    # - calling number + called number
    # - called number
    # - calling number
    # For the outbound-proxy, needs to be able to do LCR.
    # See http://www.opensips.org/html/docs/modules/1.5.x/drouting.html

    # Attempt to find a local number first.
    $avp(number) := null;
    if(!cache_fetch("local","number $rU",$avp(number))) {
      if(!avp_db_load("$rU","$avp(number)")) {
        $avp(number) := '{}';
      }
      cache_store("local","number $rU","$avp(number)",${cache_timeout});
    }

    $json(dst_number) := $avp(number);
    $avp(number) := null;

    # Alternatively, use Carrier ENUM.
    if($json(dst_number/inbound_uri)) {
      xlog("L_DBG","-- route(invite-handler): Using local inbound_uri");
      $ru = $json(dst_number/inbound_uri);
      setflag(${flag_trunk_routing});
      t_on_branch("1");
      route(initial-forwarder);   # Forward
      return;
    }

    route(invite-trunk-drouting);

    # Invalid destination
    t_reply("404", "Invalid destination");
    exit;
}
