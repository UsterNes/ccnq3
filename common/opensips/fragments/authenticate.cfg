# authenticate.cfg -- authenticate INVITE or REGISTER
# Copyright (C) 2009  Stephane Alnet
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

define need_avp_db

route[authenticate] {

  $avp(endpoint) := null;
  if(!cache_fetch("local","endpoint $si",$avp(endpoint))) {
    if(!avp_db_load("$si","$avp(endpoint)")) {
      $avp(endpoint) := '{}';
    }
    cache_store("local","endpoint $si","$avp(endpoint)",${cache_timeout});
  }

  $json(src_endpoint) := $avp(endpoint);
  $avp(endpoint) := null;

  if rate_limit
    if( $json(src_endpoint/rate_limit) ) {
      if(!rl_check( "endpoint_$json(src_endpoint/endpoint)", "$json(src_endpoint/rate_limit)" )) {
        append_to_reply("Retry-After: ${rate_limit_latency}");
        sl_send_reply("503","Calling Endpoint Rate Limit Exceeded");
        exit;
      }
    }
  end if rate_limit

  if( $json(src_endpoint/disabled) == "true" ) {
    t_reply("503", "Disabled");
    exit;
  }

  switch($json(src_endpoint/sbc)) {

    case ${sbc_own_originator}:

      # This type of SBC must provide us with a Sock-Info header,
      # similar to one we would get by doing a   add_sock_hdr("Sock-Info") ,
      # or with a RURI parameter "source" that contains the IP address of the actual originator.
      xlog("L_DBG","-- route(authenticate): Forwarding SBC $si, trying header Sock-Info = $(hdr(Sock-Info))");
      $var(host_info) = $(hdr(Sock-Info){uri.host});
      if(!$var(host_info)) {
        xlog("L_DBG","-- route(authenticate): Forwarding SBC $si, trying URI param source = $(ru{uri.param,source})");
        $avp(host_info) = $(ru{uri.param,source}); # See client-ocs-sbc.
      }

      # Replace the src_endpoint data with the data for the source specified by host_info.
      $avp(endpoint) := null;
      if(!cache_fetch("local","endpoint $var(host_info)",$avp(endpoint))) {
        if(!avp_db_load("$var(host_info)","$avp(endpoint)")) {
          $avp(endpoint) := '{}';
        }
        cache_store("local","endpoint $var(host_info)","$avp(endpoint)",${cache_timeout});
      }

      $json(src_endpoint) := $avp(endpoint);
      $avp(endpoint) := null;

      # And re-authenticate the new endpoint.
      route(authenticate_check); # Authenticate customer
      break;

    # Other SBCs are trusted (and the record is valid since we got a value for the "sbc" field).
    case ${sbc_own_outbound}:
    case ${sbc_csr_outbound}:
      xlog("L_DBG","-- route(authenticate): Not authenticating an SBC");
      break;

    default:
      xlog("L_DBG","-- route(authenticate): Using socket source IP = $si");
      route(authenticate_check); # Authenticate customer
  }

}

# -----------------------------------------------------------------
# UAC Authentication (customer-side, "untrusted")
# -----------------------------------------------------------------

route[authenticate_check] {
    xlog("L_DBG","-- route(authenticate_check): Customer device from $si");

    # Check whether this is a customer-side trunk (S2S).
    if(!$json(src_endpoint/endpoint)) {
      xlog("L_DBG","-- route(authenticate): Authorizing source $si");

      if authentication is radius
        if (!radius_proxy_authorize("${challenge}")) {
          proxy_challenge("${challenge}","0");
          exit;
        }
      end if authentication is radius

      if authentication is database
        if (!proxy_authorize("${challenge}","${auth_table}")) {
          $var(code) = $retcode;
          xlog("L_DBG","-- route(authenticate): proxy_authorize failed: $var(code)");
          proxy_challenge("${challenge}","0");
          exit;
        }
      end if authentication is database

      if($json(src_endpoint/bypass_from_auth) == "true") {
        xlog("L_DBG","-- route(authenticate): not checking From username $fu against Authentication ID $aU@$ar");
      } else {
        if (!db_check_from()) {
            t_reply("403", "Use From=Authentication-ID");
            exit;
        }
      }

      $avp(endpoint) := null;
      $var(endpoint_key) = $aU+"@"+$ar;
      if(!cache_fetch("local","endpoint $var(endpoint_key)",$avp(endpoint))) {
        if(!avp_db_load("$var(endpoint_key)","$avp(endpoint)")) {
          $avp(endpoint) := '{}';
        }
        cache_store("local","endpoint $var(endpoint_key)","$avp(endpoint)",${cache_timeout});
      }

      consume_credentials();

      if(is_avp_set("$avp(endpoint)")) {
        $json(src_endpoint) := $avp(endpoint);
      } else {
        $json(src_endpoint) = null;
      }
      $avp(endpoint) := null;

      if(!$json(src_endpoint/endpoint)) {
        t_reply("500", "Invalid source endpoint");
        exit;
      }

      xlog("L_DBG","-- route(authenticate): Customer device $(json(src_endpoint)).");
    }
}

route[authenticate_register] {
  xlog("L_DBG","-- route(authenticate_register): Customer device from $si");

  if authentication is radius
    if (!radius_www_authorize("${challenge}")) {
      xlog("L_DBG", "route(register-handler) -- Device $si ($fu) failed to register");
      www_challenge("${challenge}","0");
      exit;
    }
  end if authentication is radius

  if authentication is database
    if (!www_authorize("${challenge}","${auth_table}")) {
      xlog("L_DBG", "route(register-handler) -- Device $si ($fu) failed to register");
      www_challenge("${challenge}","0");
      exit;
    };
  end if authentication is database

  consume_credentials();

}
