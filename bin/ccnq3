#!/usr/bin/env coffee

NAME='ccnq3'
SRC="/opt/#{NAME}/src"

{ escape } = require 'querystring'
url = require 'url'
{ spawn } = require 'child_process'

ccnq3 = require 'ccnq3'

default_apps = [
  "applications/monitor"
  "applications/host"
]

manager_apps = [
  "applications/provisioning"
  "applications/logging"
  "applications/monitor"
  "applications/host"
  "applications/cdrs"
  "applications/locations"
  "applications/couch_daemon"
  "applications/voicemail-store"
]

# Set defaults, assuming _only_ locally-available information.
set_defaults = (prov_doc,hostname) ->
    # Common parameters
    prov_doc._id ?= ccnq3.make_id 'host', hostname
    prov_doc.type ?= 'host'
    prov_doc.host ?= hostname
    prov_doc.interfaces ?= {}

    prov_doc.account ?= ''
    prov_doc.updated_at ?= new Date().getTime()

    if prov_doc.admin?.system
      # --  Manager host  -- #
      apps = manager_apps

      # This _has_ to be present on a Manager.
      admin_info = url.parse prov_doc.admin.couchdb_uri

      # Default auth info
      prov_doc.admin.auth ?= admin_info.auth

      # Default AMQP info
      vhost = NAME
      amqp_info =
        protocol: 'amqp'
        hostname: admin_info.hostname
        auth:     prov_doc.admin.auth
        pathname: '/' + escape vhost
      prov_doc.admin.amqp ?= url.format amqp_info

      # Default AMQP Management info
      amqp_mgmt =
        protocol: 'http'
        hostname: admin_info.hostname
        port:     55672
        auth:     prov_doc.admin.auth
        pathname: '/api'
      prov_doc.admin.amqp_mgmt ?= url.format amqp_mgmt
    else
      # --  Non-manager host  -- #
      apps = default_apps

    prov_doc.applications ?= []
    for app in apps
      unless app in prov_doc.applications
        prov_doc.applications.push app


commands =
  'show log': ->
    ccnq3.amqp (c) ->
      c.queue 'cli', (q) ->
        q.bind 'logging', '#'
        q.subscribe (m) ->
          console.dir m

  'get admin uri': ->
    ccnq3.config (config) ->
      base_uri = config.admin?.couchdb_uri
      if not base_uri?
        console.error 'Admin access is not available on this host.'
        return 1

      console.log "#{base_uri}/_utils/"
    return

  'get name': ->
    console.log NAME
    return

  'get hostname': ->
    console.log require('os').hostname()
    return

  'get config location': ->
    console.log ccnq3.config.location
    return

  'get config source': ->
    ccnq3.config (config) ->
      if config.source
        SRC = config.source
      console.log SRC
    return

  ## -- Used on a manager during postinst -- ##
  'set admin uri': (uri) ->
    ccnq3.config (config) ->
      config.admin ?= {}
      config.admin.couchdb_uri = uri
      config.admin.system = true
      config.users ?= {}
      config.users.couchdb_uri ?= uri + '/_users'

      # Save
      ccnq3.config.update config
    return

  'set admin amqp': (uri) ->
    ccnq3.config (config) ->
      config.admin ?= {}
      config.admin.amqp = uri

      # Save
      ccnq3.config.update config
    return

  ## -- Used on a client during postinst -- ##
  'set host uri': (uri) ->
    if not uri?
      console.error 'URI parameter is required.'
      return 1

    ccnq3.config (config) ->
      config.provisioning ?= {}
      config.provisioning.host_couchdb_uri = uri

      info = url.parse uri
      # Default auth info
      config.auth ?= info.auth
      # Default AMQP info
      vhost = NAME
      amqp_info =
        protocol: 'amqp'
        hostname: info.hostname
        auth: config.auth
        pathname: '/' + escape vhost
      config.amqp ?= url.format amqp_info

      # Save
      ccnq3.config.update config
    return

  'set local uri': (uri) ->
    if not uri?
      console.error 'URI parameter is required.'
      return 1

    ccnq3.config (config) ->
      config.provisioning ?= {}
      config.provisioning.local_couchdb_uri = uri

      # Save
      ccnq3.config.update config
    return

  'set local defaults': ->
    ccnq3.config (config) ->
      if config.source
        SRC = config.source
      process.chdir SRC

      HOSTNAME = require('os').hostname()

      # Common parameters
      config.source ?= SRC
      config.interfaces ?= require('./interfaces')()

      set_defaults config, HOSTNAME

      # Save
      ccnq3.config.update config
    return

  'admin': (name) ->
    ccnq3.config (config) ->
      if config.source
        SRC = config.source
      process.chdir SRC

      if not config.users?.couchdb_uri?
        console.error 'Users access is not available on this host.'
        return

      admin_access = [
        "access:provisioning:"  # Pull provisioning database
        "update:provisioning:"  # Push provisioning database
        "update:_users:"        # Allows to create user records
        "update:_users:"        # Allows to grant the role (via applications/roles/zappa/admin.coffee)
        "update:host:"          # Role to add and modify hosts (servers)
        "update:user_db:"       # Allows to grant this role to new "voicemail@" accounts. (Not required if not using voicemail.)
        "access:_users:"        # Allows to grant this role to new "voicemail@" accounts. (Not required if not using voicemail.)
        "access:traces:"        # Allows to grant the role to users who need to gather sniffer traces
      ]

      ccnq3.db.add_roles config.users.couchdb_uri, name, admin_access, (e) ->
        if e
          console.error 'Could not update the user record: '+e
        else
          console.warn 'User account was updated successfully.'

run = ->

  command = process.argv[2]
  args = process.argv.slice 3

  if not command?
    console.info "Available commands:"
    for c of commands
      console.info "  #{c}"
    return 1

  if commands[command]?
    commands[command] args...
  else
    console.error "Unknown command #{command}"
    return 1

sync_exit = run()
if sync_exit?
  process.exit sync_exit
