#!/usr/bin/env coffee

#### The `ccnq3` script.
#
# This script is provided to ease some operations when deploying
# CCNQ3. It SHOULD normally be ran as the CCNQ3 user, which is
# by convention `ccnq3`. For example, if your system uses `sudo`, you
# might do:
#
#     sudo -u ccnq3  ccnq3 'show log'
#
# Commands might be provided either as strings-with-spaces (as shown above),
# or as strings-with-underscores; the same command might be written:
#
#     sudo -u ccnq3  ccnq3 show_log

#### Defaults
NAME='ccnq3'
# `SRC` is the default installation path. It is saved as `config.src`.
SRC="/opt/#{NAME}/src"

#### Libraries
{ escape } = require 'querystring'
url = require 'url'
{ spawn } = require 'child_process'
crypto = require 'crypto'
{ inspect } = require 'util'
pico = require 'pico'

# The `ccnq3` library provides common access to the CCNQ3 configuration,
# the CCNQ3 AMQP server, and other shared tools.
ccnq3 = require 'ccnq3'

#### Applications
#
# All servers SHOULD be running the `monitor` and the `host` applications.
# The `host` applications is especially important because it provides shared
# provisioning.
default_apps = [
  "applications/monitor"
  "applications/host"
]

# Manager servers are normally co-located with the master CouchDB database.
# The `provisioning`, `logging`, `cdrs`, `locations`, and `voicemail-store`
# applications may however be ran on non co-located manager servers. The
# `couch_daemon` application SHOULD be ran on a CouchDB server since it is
# meant to be embedded with CouchDB -- although you might embed it with a local
# HTTP proxy as well.
#
# This is the list of applications installed by debian/ccnq3-couchdb.postinst
manager_apps = [
  "applications/couch_daemon"
  "applications/provisioning"
  "applications/logging"
  "applications/cdrs"
  "applications/locations"
  "applications/voicemail-store"
]

# The local hostname.
HOSTNAME = require('os').hostname()

#### `set_defaults`
# When installing or re-installing a host, it is necessary to set some
# initial, common parameters.
# This function set those default fields, assuming _only_ locally-available
# information -- which means that it can be used during bootstrap time, even
# if the CouchDB `provisioning` database is not available.

set_defaults = (prov_doc,hostname) ->
    # Common parameters
    prov_doc._id ?= ccnq3.make_id 'host', hostname
    prov_doc.type ?= 'host'
    prov_doc.host ?= hostname
    prov_doc.applications ?= []

    prov_doc.updated_at ?= new Date().getTime()

    if prov_doc.admin?.system
      # --  Manager host  -- #
      for app in manager_apps
        unless app in prov_doc.applications
          prov_doc.applications.push app

      # `admin.couchdb_uri` _has_ to be present on a Manager.
      admin_info = url.parse prov_doc.admin.couchdb_uri

      # Default auth info is extracted from `admin.couchdb_uri`.
      prov_doc.admin.auth ?= admin_info.auth

      # Default AMQP access is created using the same.
      # (The AMQP and CouchDB servers are assumed to be co-located,
      # which is the case if you install the `ccnq3-manager` package.
      # Manually modify the `admin.amqp` field if this is not true.)
      vhost = NAME
      amqp_info =
        protocol: 'amqp'
        hostname: admin_info.hostname
        auth:     prov_doc.admin.auth
        pathname: '/' + escape vhost
        slashes:  true
      prov_doc.admin.amqp ?= url.format amqp_info

      # Default AMQP Management info, created using the same.
      amqp_mgmt =
        protocol: 'http'
        hostname: admin_info.hostname
        port:     55672
        auth:     prov_doc.admin.auth
        pathname: '/api'
      prov_doc.admin.amqp_mgmt ?= url.format amqp_mgmt
    else
      set_amqp prov_doc

    # Always (re-)inject the default applications.
    for app in default_apps
      unless app in prov_doc.applications
        prov_doc.applications.push app

set_amqp = (config) ->
  uri = config.provisioning?.host_couchdb_uri
  return unless uri?

  info = url.parse uri

  # Default auth info
  config.auth ?= info.auth

  # Default AMQP info
  vhost = NAME
  amqp_info =
    protocol: 'amqp'
    hostname: info.hostname
    auth: config.auth
    pathname: '/' + escape vhost
  config.amqp ?= url.format amqp_info

hex_sha1 = (v) ->
  crypto.createHash('sha1').update(v).digest('hex')

commands =
  #### show log
  # Connects to the AMQP `logging` exchange and prints out log data.
  # (This data is provided through the `ccnq3.log()` function.)
  'show log': ->
    ccnq3.amqp (c) ->
      c.queue 'cli', (q) ->
        q.bind 'logging', '#'
        q.subscribe (m) ->
          console.dir m
    return

  #### get admin uri
  # Returns the URI that should be used to connect (with administrative priviledges)
  # to the master CouchDB database.
  # Use with care -- this should not be used except to attempt to fix issues with
  # the server or databases. For regular provisioning access, CCNQ3 provides multiple
  # levels of authorization which are better suited.
  'get admin uri': ->
    ccnq3.config (config) ->
      base_uri = config.admin?.couchdb_uri
      if not base_uri?
        console.error 'Admin access is not available on this host.'
        return 1

      console.log "#{base_uri}/_utils/"
    return

  #### create admin password
  # Used during provisioning to create a random `admin.password` field.
  'create admin password': ->
    ccnq3.config (config) ->
      config.admin ?= {}
      if not config.admin.password?
        crypto.randomBytes 32, (e,buf) ->
          if e then throw e
          config.admin.password = buf.toString 'hex'
          ccnq3.config.update config
          console.log config.admin.password
      else
        console.log config.admin.password
      return

  #### get name
  # Returns the application names (`ccnq3`).
  'get name': ->
    console.log NAME
    return

  #### get hostname
  # Returns the local hostname. (Based on the installation
  # instructions, this SHOULD be the host FQDN.)
  'get hostname': ->
    console.log require('os').hostname()
    return

  #### get config location
  # Returns the location of the local configuration file.
  'get config location': ->
    console.log ccnq3.config.location
    return

  #### get config source
  # Returns the base directory for the packages code.
  # Always use `ccnq3 get_config_source` instead of assuming
  # `/opt/ccnq3/src'.
  'get config source': ->
    ccnq3.config (config) ->
      if config.source
        SRC = config.source
      console.log SRC
    return

  #### set admin uri
  # Parameter: new administrative URI
  #
  # Used by a manager host during post-installation in order to save
  # the proper `admin.couchdb_uri` and generate `users.couchdb_uri`.
  # The `admin.system` boolean is also set to `true` to indicate that
  # this host is a manager.
  'set admin uri': (uri) ->
    ccnq3.config (config) ->
      config.admin ?= {}
      config.admin.couchdb_uri = uri
      config.admin.system = true
      config.users ?= {}
      config.users.couchdb_uri ?= uri + '/_users'

      # Save
      ccnq3.config.update config
    return

  #### set admin amqp
  # Parameter: AMQP/AMQPS URI with admin authorization
  #
  # Used by a manager host during post-installation in order to save
  # the proper `admin.amqp`.
  'set admin amqp': (uri) ->
    ccnq3.config (config) ->
      config.admin ?= {}
      config.admin.amqp = uri

      # Save
      ccnq3.config.update config
    return

  #### set host uri
  # Parameter: HTTP/HTTPS URI to the provisioning database, with host authorization.
  #
  # Used on a client during post-installation in order to save
  # the proper `provisioning.host_couchdb_uri` and generate a
  # default `amqp` value. (Manually update the `amqp` configuration
  # value if needed.)
  'set host uri': (uri) ->
    if not uri?
      console.error 'URI parameter is required.'
      return 1

    ccnq3.config (config) ->
      config.provisioning ?= {}
      config.provisioning.host_couchdb_uri = uri

      info = url.parse uri
      username = info.auth.split(/:/)[0]
      local_username = "host@#{HOSTNAME}"
      if username isnt local_username
        console.error "URI is for a different host (#{username}) instead of the local host (#{local_username})."
        process.exit 1

      set_amqp config

      # Save
      ccnq3.config.update config
    return

  #### set local uri
  # Parameter: local HTTP URI pointing to the local replica of the provisioning database.
  #
  # Used by the client post-installation script to set the
  # local couchdb URI.
  'set local uri': (uri) ->
    if not uri?
      console.error 'URI parameter is required.'
      return 1

    ccnq3.config (config) ->
      config.provisioning ?= {}
      config.provisioning.local_couchdb_uri = uri

      # Save
      ccnq3.config.update config
    return

  #### set local defaults
  # Might be used on any server to re-set the default parameters.
  # Overwrite the hostname, interfaces.
  # (See above the description of `set_defaults`.)
  'set local defaults': ->
    ccnq3.config (config) ->
      if config.source
        SRC = config.source
      process.chdir SRC

      # Common parameters
      config.source ?= SRC
      config.interfaces ?= require('./interfaces')()

      set_defaults config, HOSTNAME

      # Save
      ccnq3.config.update config
    return

  #### add local service
  # Parameter: service name to be added (e.g. `applications/host`).
  #
  # Add an entry in the `applications` array.
  'add local service': (name) ->
    ccnq3.config (config) ->
      if config.source
        SRC = config.source
      process.chdir SRC

      config.applications ?= []
      unless name in config.applications
        config.applications.push name

      ccnq3.config.update config

  #### add user
  # Parameters:
  #   username
  #   password
  #
  # Add a new user to the CouchDB database.
  # FIXME: Add the same user to the AMQP server.
  'add user': (name,password) ->
    ccnq3.config (config) ->
      if config.source
        SRC = config.source
      process.chdir SRC

      if not config.users?.couchdb_uri?
        console.error 'Users access is not available on this host.'
        return

      ccnq3.db.add_user config.users.couchdb_uri, name, password, (e) ->
        if e
          console.error "Could not update the user record: #{inspect e}"
        else
          console.warn 'User account was updated successfully.'
    return

  #### admin
  # Parameter: username
  #
  # Mark the username as a CCNQ3 administrative user.
  # Note: This is the proper way to give a user administrative access to the
  # CCNQ3 system. This does not give them administrative access to CouchDB.
  'admin': (name) ->
    ccnq3.config (config) ->
      if config.source
        SRC = config.source
      process.chdir SRC

      if not config.users?.couchdb_uri?
        console.error 'Users access is not available on this host.'
        return

      admin_access = [
        "access:provisioning:"  # Pull provisioning database
        "update:provisioning:"  # Push provisioning database
        "update:_users:"        # Allows to create user records
        "update:_users:"        # Allows to grant the role (via applications/roles/zappa/admin.coffee)
        "update:host:"          # Role to add and modify hosts (servers)
        "update:user_db:"       # Allows to grant this role to new "voicemail@" accounts. (Not required if not using voicemail.)
        "access:_users:"        # Allows to grant this role to new "voicemail@" accounts. (Not required if not using voicemail.)
        "access:traces:"        # Allows to grant the role to users who need to gather sniffer traces
      ]

      ccnq3.db.add_roles config.users.couchdb_uri, name, admin_access, (e) ->
        if e
          console.error "Could not update the user record: #{inspect e}"
        else
          console.warn 'User account was updated successfully.'
    return

  #### add host
  # Parameter: hostname (FQDN)
  #
  # Ran on a manager server, generates proper records and authentication for the given
  # hostname.
  'add host': (hostname) ->
    if not hostname?
      console.error 'Hostname is required.'
      return 1

    ccnq3.config (config) ->
      if config.source
        SRC = config.source
      process.chdir SRC

      if not config.admin?.couchdb_uri?
        console.error 'CouchDB admin access is not available on this host.'
        return

      if not config.admin?.amqp_mgmt?
        console.error 'AMQP admin access is not available on this host.'
        return

      if not config.users?.couchdb_uri?
        console.error 'Users access is not available on this host.'
        return

      if not config.provisioning?.couchdb_uri?
        console.error 'Provisioning acces is not available on this host.'
        return

      # Take care of the setup in the _users database.
      user_db = pico config.users.couchdb_uri
      host_user = 'host@' + hostname
      user_db.get_user host_user, (e,r,user_doc) ->
        new_password = null
        if e or not user_doc._rev?
          console.log "[ Assuming user #{host_user} wasn't registered. ]"
          new_password = hex_sha1 "a"+Math.random()
          user_doc =
            name: host_user
            password: new_password

        user_doc.roles ?= []
        user_doc.roles.push 'host' unless 'host' in user_doc.roles

        user_db.put_user user_doc, (e) ->
          if e
            console.error inspect e
            process.exit 1

        # Take care of the setup in the provisioning database.
        _id = ccnq3.make_id 'host', hostname
        prov_db = pico config.provisioning.couchdb_uri
        prov_db.get _id, (e,r,prov_doc) ->
          unless prov_doc?._rev?
            console.log "[ Assuming new record for _id #{_id} (#{inspect e}) ]"
            prov_doc = { _id }

          make_host_uri = (cdb_uri,pathname) ->
            cdb_info = url.parse cdb_uri
            delete cdb_info.pathname if cdb_info.pathname is '/'
            host_info =
              protocol: cdb_info.protocol
              auth:     prov_doc.auth
              hostname: cdb_info.hostname
              port:     cdb_info.port
              pathname: cdb_info.pathname ? pathname
            url.format host_info

          # --  Compute new prov_doc.auth  --

          if new_password?
            prov_doc.password = new_password  # legacy
            prov_doc.auth = host_user + ':' + new_password
            # FIXME This will go very bad if prov_doc.provisioning.host_couchdb_uri, etc.
            # already exist. We really ought to update all those records.

          # Former code used `password` only. Really we need both fields, it's so much
          # simpler to deal with. So migrate the record.
          if prov_doc.password? and not prov_doc.auth?
            prov_doc.auth = host_user + ':' + prov_doc.password
            # FIXME Same as above, there's no obligation that the URIs match.
            # At least we should indicate that there's a discrepancy.

          # The Official Way: export from provisioning.host_couchdb_uri.
          if not prov_doc.password? and not prov_doc.auth? and prov_doc?.provisioning?.host_couchdb_uri?
            prov_info = url.parse prov_doc.provisioning.host_couchdb_uri
            prov_doc.auth = prov_info.auth
            # This will break happily if you use ':' in your passwords.
            # So stick to our automagically-generated SHA1 passwords.
            prov_doc.password = prov_doc.auth.split(/:/)[1]

          set_defaults prov_doc, hostname

          prov_doc.provisioning ?= {}

          prov_doc.provisioning.host_couchdb_uri ?=
            if config.provisioning?.host_couchdb_uri?
              make_host_uri config.provisioning.host_couchdb_uri
            else
              if config.provisioning?.couchdb_uri?
                make_host_uri config.provisioning.couchdb_uri
              else
                make_host_uri config.admin.couchdb_uri, '/provisioning'

          console.log "Host CouchDB URI is: #{prov_doc.provisioning.host_couchdb_uri}"

          # Default AMQP info
          set_amqp prov_doc

          prov_doc.logging ?= {}

          prov_doc.logging.host_couchdb_uri ?=
            if config.logging?.host_couchdb_uri?
              make_host_uri config.logging.host_couchdb_uri
            else
              if config.logging?.couchdb_uri?
                make_host_uri config.logging.couchdb_uri
              else
                make_host_uri config.admin.couchdb_uri, '/logging'

          prov_doc.monitor ?= {}

          prov_doc.monitor.host_couchdb_uri ?=
            if config.monitor?.host_couchdb_uri?
              make_host_uri config.monitor.host_couchdb_uri
            else
              if config.monitor?.couchdb_uri?
                make_host_uri config.monitor.couchdb_uri
              else
                make_host_uri config.admin.couchdb_uri, '/monitor'

          prov_doc.provisioning.local_couchdb_uri ?= 'http://127.0.0.1:5984/provisioning'

          prov_doc.traces ?= {}

          prov_doc.traces.upload_uri ?= prov_doc.logging.host_couchdb_uri

          # save in provisioning db
          prov_db.put prov_doc, (e,r) ->
            if e?
              console.error "Could not create record for _id #{_id}: #{inspect e}"
              process.exit 1

          # Register with RabbitMQ
          amqp_mgmt = pico.request config.admin.amqp_mgmt

          amqp_user_info =
            password: prov_doc.password
            tags: ""
          amqp_mgmt.put "/users/#{escape host_user}", json:amqp_user_info, (e,r) ->
            if e?
              console.error "Could not create AMQP user: #{inspect e}"
              process.exit 1
            unless 200 <= r.statusCode < 300
              console.error "Could not create AMQP user: #{r.statusCode}"
              process.exit 1
            # FIXME get the vhost from the amqp URI.
            user_vhost = NAME
            amqp_permissions =
              configure: ".*"
              write: ".*"
              read: ".*"
            amqp_mgmt.put "/permissions/#{escape user_vhost}/#{escape host_user}", json:amqp_permissions, (e,r) ->
              unless 200 <= r.statusCode < 300
                console.error "Could not create AMQP user: #{inspect e}"
                process.exit 1
    return

  'munin couchdb': (that) ->
    if that is 'config'
      console.log '''
        graph_title CouchDB Replication
        graph_args -l 0
        graph_vlabel Progress
        graph_category couchdb

        couchdb_replication_cdrs_progress.label CDRs (Progress)
        couchdb_replication_cdrs_progress.info Progress of CDRs replication
        couchdb_replication_cdrs_progress.colour ff2020
        couchdb_replication_cdrs_progress.max 100
        couchdb_replication_cdrs_progress.min 0
        couchdb_replication_cdrs_progress.draw LINE1
        couchdb_replication_provisioning_progress.label Provisioning (Progress)
        couchdb_replication_provisioning_progress.info Progress of provisioning replication
        couchdb_replication_provisioning_progress.colour 20ff20
        couchdb_replication_provisioning_progress.max 100
        couchdb_replication_provisioning_progress.min 0
        couchdb_replication_provisioning_progress.draw LINE1
        couchdb_replication_cdrs_behind.label CDRs (Behind)
        couchdb_replication_cdrs_behind.info Number of missing CDR records still to be replicated
        couchdb_replication_cdrs_behind.colour ffa0a0
        couchdb_replication_cdrs_behind.draw AREA
        couchdb_replication_provisioning_behind.label Provisioning (Behind)
        couchdb_replication_provisioning_behind.info Number of missing provisioning records still to be replicated
        couchdb_replication_provisioning_behind.colour a0ffa0
        couchdb_replication_provisioning_behind.draw AREA
      '''
      return

    couch = pico.request 'http://127.0.0.1:5984'
    couch '/_active_tasks', json:true, (e,r,b) ->
      if e? or not b?
        return
      for task in b
        do (task) ->
          return unless type is 'replication'
          return unless task.source_seq? and task.checkpointed_source_seq? and task.target? and task.source?
          behind = task.source_seq - task.checkpointed_source_seq
          name = if task.source.match /^http/ then task.target else task.source
          console.log """
            couchdb_replication_#{name}_progress.value #{task.progress}"
            couchdb_replication_#{name}_behind.value #{behind}
          """

    return

#### main

run = ->

  command = process.argv[2]
  args = process.argv.slice 3

  if not command?
    console.info "Available commands:"
    for c of commands
      console.info "  #{c}"
    return 1

  command = command.replace /_/g, ' '
  if commands[command]?
    commands[command] args...
  else
    console.error "Unknown command #{command}"
    return 1

sync_exit = run()
if sync_exit?
  process.exit sync_exit
