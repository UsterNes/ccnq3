This document is up-to-date as of 2012-01-02.

Notes:
* URI of databases = URI of CouchDB databases (always a string).
  These URIs might contain authentication usernames and passwords.

# provisioning records

## host (aka config)

### Common section

All the fields in this section are pre-populated by the various scripts.
Only the "applications" array will need to be expanded.

Caveat: provisioning.host_couchdb_uri might need to be fixed if the system cannot guess
your installation.

    _id: type+":"+host
    account: ""    (the empty string)
    updated_at: integer, update timestamp in ms [required]
      Note: new Date().getTime()  for example

    type:"host"
    host: string; hostname, preferably FQDN (must match what the "hostname" command returns)

    # Note: Changing any of these settings would require to restart the matching
    #       services, since configuration is read (in most cases) once at startup.

    admin:   (only present for bootstrap-system hosts normally; there's no reason to modify these)
      couchdb_uri: server admin URI
      system: true   (indicates this host is the one that should do system updates)

    applications: [] of strings, list of applications that need to be installed
      Note: these are simply relative paths to the matching "package" for that application.
      Note: to apply these changes you must restart ccnq3 on the host.
      Example:   [ "applications/host", "applications/traces", "applications/freeswitch" ]

    usercode:
      couchdb_uri: URI of the usercode database (with database admin authentication) [used by couchapps to install their applications]

    provisioning:
      couchdb_uri: URI of the provisioning database (with database admin authentication) [used by couchapps apps to insert new applications]
        Note: normally only present on a manager host (and only used by installation scripts)
      host_couchdb_uri: URI of the provisioning database (read-only) [allows access to the main provisioning database from any host]
        Note: this URI is used as the source for replication of the provisioning database onto a non-manager host
              Replication will work better if this URI points directly to CouchDB (rather than a reverse proxy, for example).
        Note: this URI is also used by ccnq3_config to locate the host's configuration; if it is not present only the local (file-based) configuration will be used.
      local_couchdb_uri: URI of a local replica of the provisioning database [used by local applications such as opensips]
        Note: generally http://127.0.0.1:5984/provisioning [no authentication to keep things faster]
        Note: realtime (call-handling) applications should only rely on this database as their primary source

    install: (normally not defined)
      # This feature is used to force re-installation of the corresponding databases (for example to change the URI)
      usercode:
        couchdb_uri
      provisioning:
        couchdb_uri
      users:
        couchdb_uri

### Specific to hosts running FreeSwitch.

To add a FreeSwitch host:

1. configure the fields in this section
   (You'll need to configure at least "sip_domain_name".)
   (You'll need to configure one sip_profiles[] in order to be able to place calls.)
2. add "applications/freeswitch" to the applications field [and restart ccnq3]
3. run common/freeswitch/install.sh on the host to enable FreeSwitch


    sip_domain_name:  string (required); FQDN accepted by the server
    rtp_ip: local IP to bind to for RTP [default: "auto"]
    sip_profiles: {} of profiles descriptions:

        sip_profiles[profile_name]:

          # Sofia data
          template: sofia template name (e.g. "sbc-media", "sbc-nomedia")
          # For the "sbc*" types, we need:
          ingress_sip_ip: which IP (v4,v6) to bind for ingress processing
          ingress_sip_port: which port to bind for ingress processing [in the range 5060 to 5299]
          ingress_acl: [] of CIDR records "ip/masklen" source IPs allowed for ingress processing
          egress_sip_ip: which IP (v4,v6) to bind for egress processing [default: ingress_sip_ip]
          egress_sip_port: which port to bind for egress processing [default: 10000+ingress_sip_port; in the range 15060 to 15299]
          egress_acl: [] of CIDR records "ip/masklen" source IPs allowed for the egress processing

            Note: port numbers must be in the range 5060 to 5299 or 15060 to 15299 to be compatible with the "traces" application.
            Note: look in doc/doc/port-numbers.mdwn for port numbers conventions.

          # Dialplan data
          handler: dialplan template name (e.g. "client-sbc", "carrier-sbc")
          type: dialplan profile type (e.g. "usa", "usa-cnam", "fr" for processing="client-sbc")
          send_call_to: where to send the calls ("socket", "bridge") [default: "socket"]
          ingress_target: domain where to send ingress calls
          egress_target: domain where to send egress calls

      Notes: changes (except for *_sip_ip and *_sip_port) are automatically applied.

    sip_commands: {} of profiles commands:

        sip_commands[sofia_profile]: string
          One of:
            "start"       sofia profile <profile_name> start
            "restart"     sofia profile <profile_name> restart reloadxml  [required to change IP or port]
            "stop"        sofia profile <profile_name> killgw

        sip_commands.freeswitch: string
          One of:
            "reload sofia"    unload mod_sofia, load mod_sofia            [required to add a new profile]
            "pause inbound"   fsctl pause inbound
            "pause outbound"  fsctl pause outbound
            "resume inbound"  fsctl resume inbound
            "resume outbound" fsctl resume outbound

        Note: All these commands will cause calls to drop if any is present on that profile.
        Note: The "sofia_profile" key is either "egress-#{profile_name}" or "ingress-#{profile_name}" so that each direction
              can be restarted independently.
        Note: Add a command then remove it from the hash to prevent accidental misfiring of commands.
        Note: A special "sofia_profile" key "opensips" is used to send events to a running OpenSIPS process (rather than a
              FreeSwitch sofia profile). These events must follow the OpenSIPS "MI" syntax.

    sip_variables: {} of global (FreeSwitch) variables; defaults to {}
        Note: The idea is that these can be used on a per-host basis by additional dialplans, profiles, etc.
        Note: These should also show up in CDRs. FIXME confirm this is the case

### Specific to hosts running OpenSIPS.

To add an OpenSIPS host:

1. configure the fields in this section
2. add "applications/opensips" to the applications field [and restart ccnq3]
3. run common/mediaproxy/install.sh to install mediaproxy FIXME still requires some work
4. run common/opensips/install.sh on the host to enable OpenSIPS


    opensips_proxy:
      port:34340   integer, required, do not change
      hostname:"127.0.0.1"   string, required, do not change
      usrloc_uri: URI of the location database (used to save registration data)
        Note: this should be "http://127.0.0.1:5984/location"

    opensips:
      model: "complete", or any other model defined in common/opensips [required]
      listen: [] of strings "host:port" to which OpenSIPS will bind()  [default is the empty array, in which case OpenSIPS binds to all interfaces on port 5060]
      local_ipv4: for models using it ("conference"), IP where to send all INVITE messages
      local_ipv6: reserved

    sip_commands.opensips: string
      One of:
        "reload routes"         [apply "rule" or "gateway" record changes]

### Specific to hosts running the portal (or its back-end).

To enable the portal service:

1. configure the fields in this section
2. add "applications/portal" to the applications field [and restart ccqn3]

Note: this service is enabled by default on the manager host.
You should not have to modify these settings.


    portal:
      port: integer (8765)
      hostname:  string ("127.0.0.1")
    session:
      secret:  string; must be a random string
      couchdb_uri:  public URI used to create CouchDB sessions (must end with "/_session"; no authentication in the URI)
    users:
      couchdb_uri: URI of the _users database (with database admin authentication)
      replicate_uri: URI for "/_replicate" (with database admin authentication)
      userdb_base_uri: base URI of the various users' databases (with server admin authentication, used to create the databases)
      public_userdb_base_uri: public base URI of the various users' databases (no authentication! given out to the users)
    mailer:     Used as the configuration for the node-mailer package.
      sendmail: "/usr/sbin/sendmail"
      SMTP: null
    mail_password:
      sender_local_part: "support"; The mail_password agent will send emails from  sender_local_part+"@"+domain (where domain is the user's record's "domain" field).

    Note: "host" records are referred to as the "config" record inside most applications.

### Specific to hosts running SIP traces.

To start traces:

1. install the ccnq3-traces package
2. configure the fields in this section
3. add "applications/traces" to the applications field

Note: this is not enabled by default even after you install the ccnq3-traces package.


    traces:
      interfaces: [] of interfaces names
      # There's no reason to modify the following parameters for traces.
      filesize: integer, maximum size of the sniffer traces (in ko), defaults to 10000
      ringsize: integer, maximum number of sniffer trace files, defaults to 50
      workdir: string, directory used to store the traces, defaults to /opt/ccnq3/traces
      filter: string, pcap filter for traces, defaults to ports used by ccnq3 applications

### Other data in a "host" provisioning record.

### Attachments

Attachments of type "application/javascript" are executed after each change.
The attachments might use any core Node.js modules.

FIXME test this feature

## domain

    _id: type+":"+domain
    account: ""    (the empty string)

    type:"domain"
    domain: string; name of a SIP domain accepted by the system

    FIXME: these probably need to be indexed by host

## account_forwarder

For non-trusted host that are allowed to submit P-Charge-Info, list of accounts they may submit.

    _id: type+":"+account+'@'+endpoint
    account: account

    type:"account_forwarder"
    endpoint: endpoint

## endpoint

    _id: type+":"+endpoint
    account: string

    type:"endpoint"
    endpoint: string; either a static IP, or a user@domain registration username
    password: string; password used for authentication, or null if authentication not used
    ha1: authentication string; md5_hex([endpoint,challenge,password].join(":"))
    ha1b: authentication string; md5_hex([endpoint+'@'+challenge,challenge,password].join(":"))
      Note: if the "challenge" configuration parameter is empty (the default), the domain name of the To: header (for REGISTER) or From: header (for other messages) is used as the challenge. In other words: normally the challenge should be the same as the domain name used for the endpoint.

    # Inbound call routing
    dst_endpoint/dest_domain
    dst_endpoint/dst_disabled
    dst_endpoint/strip_digit
    dst_endpoint/user_force_mp
    dst_endpoint/user_ip
    dst_endpoint/user_port
    dst_endpoint/user_srv
    dst_endpoint/user_via

    # Outbound call routing
    dialog_timer: integer; maximum call (dialog) duration
    outbound_route: integer; route to use for outbound calls from this endpoint; if null, per-number outbound_route is used

    src_endpoint/allow_onnet
    src_endpoint/check_from
    src_endpoint/dest_domain
    src_endpoint/dialog_timer
    src_endpoint/disabled
    src_endpoint/forwarding_sbc
      1 SBC provides originator info as Sock-Info or source RURI param [only for trusted SBC]
      2 SBC provides account info in P-Charge-Info; non-trusted SBCs are checked against account_forwarder
    src_endpoint/location
    src_endpoint/outbound_route
    src_endpoint/src_disabled
    src_endpoint/trusted
    src_endpoint/user_force_mp



## number

    _id: type+":"+number
    account: string

    type:"number"
    number: string; the number as routed inside the system; note that this must be consistent end-to-end; normally the inbound- and outbound-proxies rely on "E.164-without-plus"; while the client-side servers might rely on locally-formatted numbers.

    # Outbound call routing
    outbound_route: integer; the outbound_route used if the endpoint has no outbound_route assigned
    location:  string; the location identifier for this specific number (used for emergency location services)

    # Inbound call routing
    dst_number/cfa
    dst_number/cfb
    dst_number/cfda
    dst_number/cfnr
    dst_number/dialog_timer
    dst_number/dst_domain
    dst_number/inv_timer
    dst_number/number



## rule (aka outbound_route)

    _id: type+":"+rule
    account: ""    (the empty string)

    type:"rule"
    rule: host+":"+ruleid
    host: the host on which OpenSIPS is running and using this rule/outbound_route
    ruleid: integer; a unique ID for this rule
    groupid: integer; the "outbound_route" identifier found in "endpoint" and "number" records
    prefix: string; the routing (number) prefix (might be ""), longest-prefix match
    timerec: string; a time specification
    priority: integer; ruleset ordering criteria (within the groupid and prefix, for matching timerecs, the rule with the highest priority is chosen)
    gwlist: string; a comma- and semicolon-separated list of gateways

    # The following fields are required even though they are not currently used.
    routeid: 0   (the integer 0)
    attrs: ""   (the empty string)

    Note: For the complete specification, see http://www.opensips.org/html/docs/modules/1.7.x/drouting.html#id293582
    Note: We use sort_order = 1, meaning that inside gwlist each semicolon delimits a group of gateways; each group contains a comma-delimited list of gateways. For each call, two gateways are selected at random in each group (groups are kept in the order they appear), and the call is then sequantially forked to each gateway.
    Note: Changes are not applied automatically. Use sip_commands.opensips = "reload routes" to apply the changes.


## gateway

    _id: type+":"+gateway
    account: ""    (the empty string)

    type:"gateway"
    gateway: host+":"+gwid
    host: the host on which OpenSIPS is running and using this gateway
    gwid: integer; a unique identifier for the gateway on this host; used in the "gwlist" field of the "rule" record
    address: the address of the gateway (IP, IP:port, etc.)

    # The following fields are required even though they are not currently used.
    gwtype: 0   (the integer 0)

    # The following fields are required, and might be used at your convenience, although we only test the values shown here.
    probe_mode: 0
    strip: 0

    # The following fields are optional
    pri_prefix:  string
    description:  string

    Note: for probe_mode, the following modes are available:
      0: no probing
      1: probing only when disabled (however our scripts do not use dr_disable())
      2: probing at all times
    Note: Changes are not applied automatically. Use sip_commands.opensips = "reload routes" to apply the changes.

## location

    _id: type+":"+location
    account: string

    type:"location"
    location:  string; a unique identifier for this location
    routing_data:  string; specific to the emergency routing system used


# _users records

The _users database is CouchDB's standard authentication database.

## user record

    _id:"org.couchdb.user:"+name
    type:"user"
    name:  string; the username
    password_sha:  string; sha1_hex(password+salt)
    salt:  string; a random string
    user_database:  string; the name of the user's own CouchDB instance
    roles: [] of string
    domain:  string; name of the domain used at registration time
    profile:
      name:  string; user's full name
      email:  string or array of strings; email or email addresses for this user
      phone:  string; phone number for this user
      userdb_base_uri:  base URI (to which the user_database is concatenated)
      user_name: name
      user_database: user_database

  Notes: This is a standard CouchDB _users record with some additions.
  Notes: The "profile" hash is returned by a GET /u/profile.json once logged-in.
  Notes: The "name" field is normally the user's main email address (at least that's what the registration code assumes); servers and applications will also have _users records so that they can remotely access the main database.
  Notes: Servers should have the "host" role assigned.
  Notes: The roles hash can also be manipulated using the REST API in applications/roles.

## host record

  _id:"org.couchd.user:"+name
  type:"user"
  name:"host@" + hostname
  password_sha
  salt
  roles: ["host"]

# usercode records

This database should only contain design documents which are replicated into each user's private database when the user logs in.

# endpoint location records

These record are read-only.
(In other words you should not attempt to modify them.)
They are updated by OpenSIPS.

## endpoint location

    _id: username+"@"+domain (registration username)
    username: string; username part of the registration username@domain
    domain: string; domain part of the registration username@domain
    # Information received from the client
    callid: string
    contact: string
    cseq: integer
    q: integer (-1 if none is provided by the endpoint)
    user_agent: string
    # Information stored by the server to manage the registration
    last_modified: string (datetime, UTC)
    expires: string (datetime, UTC)
    received: string (IP:port from which the registration packet originated)
    socket: string (IP:port on which we received the registration packet)
    methods: integer
    path: string
    cflags: integer
    flags: 0
