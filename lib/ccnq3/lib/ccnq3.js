// Generated by CoffeeScript 1.3.3
(function() {
  var config_location, debug, get, make_id, pico, retrieve, update, util;

  util = require('util');

  pico = require('pico');

  debug = false;

  make_id = function(t, n) {
    return [t, n].join(':');
  };

  exports.make_id = make_id;

  config_location = process.env.npm_package_config_file;

  if (!(config_location != null)) {
    config_location = '/etc/ccnq3/host.json';
    if (debug) {
      util.log("NPM did not provide a config_file parameter, using " + config_location + ".");
    }
  }

  get = function(cb) {
    var fs, fs_config, rev;
    if (debug) {
      util.log("Using " + config_location + " as configuration file.");
    }
    fs = require('fs');
    try {
      fs_config = JSON.parse(fs.readFileSync(config_location, 'utf8'));
    } catch (error) {
      util.log("Reading " + config_location + ": " + (util.inspect(error)));
      return cb({});
    }
    rev = fs_config != null ? fs_config._rev : void 0;
    return retrieve(fs_config, function(config) {
      if (rev !== config._rev) {
        update(config);
      }
      return cb(config);
    });
  };

  module.exports.config = get;

  module.exports.config.location = config_location;

  retrieve = function(config, cb) {
    var provisioning, username;
    if (!(config.host != null) || !(config.provisioning != null) || !(config.provisioning.host_couchdb_uri != null)) {
      util.log("Information to retrieve remote configuration is not available.");
      return cb(config);
    }
    username = make_id('host', config.host);
    provisioning = pico(config.provisioning.host_couchdb_uri);
    return provisioning.get(username, function(e, r, p) {
      if (e) {
        util.log("Retrieving live configuration failed: " + (util.inspect(e)) + "; using file-based configuration instead.");
        return cb(config);
      } else {
        if (debug) {
          util.log("Retrieved live configuration.");
        }
        return cb(p);
      }
    });
  };

  module.exports.config.retrieve = retrieve;

  update = function(content) {
    var fs;
    if (!(content != null)) {
      util.log("Cannot update empty configuration.");
      return;
    }
    if (debug) {
      util.log("Updating local configuration file.");
    }
    fs = require('fs');
    return fs.writeFileSync(config_location, JSON.stringify(content));
  };

  module.exports.config.update = update;

  module.exports.db = {
    security: function(uri, name, trust_hosts) {
      var db;
      db = pico(uri);
      return db.request.get('_security', {
        json: true
      }, function(e, r, p) {
        var _base, _base1;
        p.admins || (p.admins = {});
        (_base = p.admins).roles || (_base.roles = []);
        if (p.admins.roles.indexOf("" + name + "_admin") < 0) {
          p.admins.roles.push("" + name + "_admin");
        }
        p.readers || (p.readers = {});
        (_base1 = p.readers).roles || (_base1.roles = []);
        if (p.readers.roles.indexOf("" + name + "_writer") < 0) {
          p.readers.roles.push("" + name + "_writer");
        }
        if (p.readers.roles.indexOf("" + name + "_reader") < 0) {
          p.readers.roles.push("" + name + "_reader");
        }
        if (trust_hosts) {
          if (p.readers.roles.indexOf("host") < 0) {
            p.readers.roles.push("host");
          }
        }
        return db.request.put('_security', {
          json: p
        });
      });
    }
  };

}).call(this);
