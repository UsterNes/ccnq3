These applications implement HTTP proxies for applications.

Note: the names are a variation on DBSlayer, which is cool but didn't do
      what I needed (updates, for example).
        http://code.nytimes.com/projects/dbslayer

=== pgslayer ===


pgslayer gives access to Perl's DBI for one or more databases. The
database mappings are defined in the configuration file pgslayer.config.


Here is an example pgslayer.config:

  {
    "httpd_host":"127.0.0.1",
    "httpd_port":6789,
    "db": {
      "default": {
        "location":"dbi:Pg:dbname=db;host=127.0.0.1",
        "username":"username",
        "password":"password"
      }
    }
  }

Note: Any DBD backend could be used, even though this example only shows
PostgreSQL, and only PostgreSQL has been tested so far.
(The name should probably be dbdlayer rather than pgslayer.)


The mapping named "default" can then be accessed at
  http://127.0.0.1:6789/default
using the POST HTTP method.


The body of the request must be a valid application/json JSON structure
which follows this layout:

  {
    "sql": "SELECT * FROM this_table WHERE name = ? AND company = ?",
    "params": ["foo","bar"]
  }

Again, any valid SQL query can be executed. The syntax is DBI's syntax.


The request is forwarded (using DBI) to the server specified for the
profile, and a JSON structure is returned (whatever the outcome of the
DBI request may be). This structure follows the layout:

  {
    "status": "optional status",
    "error": "optional error message",
    "rows": [
      { "name":"foo", "surname":"john", "company":"bar", "likes":"turtles" },
      { "name":"foo", "surname":"jerry", "company":"bar", "likes":"sunsets" }
    ]
  }

The client should check for any HTTP errors. The server will always
return 200 OK if DBI returns; any DBI or SQL error will be found in the
"error" field of the returned JSON body. If the "error" field is not
present then the SQL request was successful.


Here is an example Zappa application fragment which shows how this can
be used:


  def req: require 'request'

  # Helper function to handle the HTTP request.
  helper sql: (_sql,_p,cb) ->
    _uri = config().sql_db_uri   # Gather the URI from somewhere
    data =
      sql: _sql
      params: _p

    options =
      method:  'POST'
      uri:     _uri
      headers: {accept:'application/json','content-type':'application/json'}
      body:    new Buffer(JSON.stringify(data))
    req options, (error,response,body) ->
      if(!error && response.statusCode == 200)  # HTTP layer is OK
        cb(JSON.parse(body))
      else  # indicate HTTP layer error
        cb({error:error})

  # Main code that creates the SQL query, submits it, and renders a page
  # based on the outcome.

  def fields: 'username email name address city zip country'.split(' ')

  helper update_user: ->
    setters = (f+'=?' for f in fields)
    values  = (params[f] for f in fields)
    sql 'UPDATE realuser SET '+setters.join(',')+' WHERE user_id = ?', [values...], (r) =>
      if r.error?
        return render 'error'
      render 'success'


Credits and dependencies:
  pgslayer relies on AnyEvent::HTTPD (not included) and on a minimally
  modified (so that it returns an array of hashes) version of AE::DBI.



=== dsmlayer ===

dsmlayer gives access to Dancer's session management. (This has limited
use and will be removed in the future.)
